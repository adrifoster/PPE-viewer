zones = unique(totals$zone_name)
ttest_dat = data.frame(zone_name = zones)
ttest_dat$tval = NA
ttest_dat$pval = NA
ttest_dat$sig = FALSE
for (i in 1:length(zones)){
out = get_pval(land_area, zones[i])
ttest_dat[i, 'tval'] = as.numeric(out$tstat)
ttest_dat[i, 'pval'] = as.numeric(out$pval)
if (ttest_dat[i, 'pval'] < 0.05){
ttest_dat[i, 'sig'] = TRUE
}
}
View(ttest_dat)
totals = filter(land_area, zone_name %in% sums$zone_name) %>%
mutate(land_area_km3 = zone_area/1E6) %>%
group_by(period, zone_name) %>%
summarize(mean_land = mean(land_area_km3, na.rm=T),
sd_land = sd(land_area_km3, na.rm = T),
num = n()) %>%
ungroup() %>%
mutate(se_land = sd_land/sqrt(num)) %>%
merge(ttest_dat, by = 'zone_name')
View(totals)
ggplot(totals, aes(zone_name, mean_land)) +
geom_col(aes(fill=period), position='dodge') +
geom_errorbar(aes(x=zone_name, ymin=mean_land - sd_land*tval,
ymax = mean_land + sd_land*tval, group=period),
position = position_dodge(width = 0.9),
colour='gray') +
scale_fill_manual(values=c('gray10', 'firebrick')) +
ylab(expression(Land~Area~(km^2~x~10^6))) +
xlab("Holdridge Life Zone") +
scale_y_continuous(labels=scales::comma) +
theme_bw() +
theme(axis.text.x = element_text(hjust=1, angle=45))
ggplot(totals, aes(zone_name, mean_land)) +
geom_col(aes(fill=period), position='dodge') +
geom_errorbar(aes(x=zone_name, ymin=mean_land - sd_land*(tval/1E6),
ymax = mean_land + sd_land*(tval/1E6), group=period),
position = position_dodge(width = 0.9),
colour='gray') +
scale_fill_manual(values=c('gray10', 'firebrick')) +
ylab(expression(Land~Area~(km^2~x~10^6))) +
xlab("Holdridge Life Zone") +
scale_y_continuous(labels=scales::comma) +
theme_bw() +
theme(axis.text.x = element_text(hjust=1, angle=45))
ggplot(totals, aes(zone_name, mean_land)) +
geom_col(aes(fill=period), position='dodge') +
geom_errorbar(aes(x=zone_name, ymin=mean_land - sd_land*2,
ymax = mean_land + sd_land*2, group=period),
position = position_dodge(width = 0.9),
colour='gray') +
scale_fill_manual(values=c('gray10', 'firebrick')) +
ylab(expression(Land~Area~(km^2~x~10^6))) +
xlab("Holdridge Life Zone") +
scale_y_continuous(labels=scales::comma) +
theme_bw() +
theme(axis.text.x = element_text(hjust=1, angle=45))
View(ttest_dat)
ggplot(totals, aes(zone_name, mean_land)) +
geom_col(aes(fill=period), position='dodge') +
geom_errorbar(aes(x=zone_name, ymin=mean_land - sd_land*2,
ymax = mean_land + sd_land*2, group=period),
position = position_dodge(width = 0.9),
colour='gray') +
scale_fill_manual(values=c('gray20', 'firebrick')) +
ylab(expression(Land~Area~(km^2~x~10^6))) +
xlab("Holdridge Life Zone") +
scale_y_continuous(labels=scales::comma) +
theme_bw() +
theme(axis.text.x = element_text(hjust=1, angle=45))
ggplot(totals, aes(zone_name, mean_land)) +
geom_col(aes(fill=period), position='dodge') +
geom_errorbar(aes(x=zone_name, ymin=mean_land - sd_land*2,
ymax = mean_land + sd_land*2, group=period),
position = position_dodge(width = 0.9),
colour='gray') +
scale_fill_manual(values=c('gray30', 'firebrick')) +
ylab(expression(Land~Area~(km^2~x~10^6))) +
xlab("Holdridge Life Zone") +
scale_y_continuous(labels=scales::comma) +
theme_bw() +
theme(axis.text.x = element_text(hjust=1, angle=45))
ggplot(totals, aes(zone_name, mean_land)) +
geom_col(aes(fill=period), position='dodge') +
geom_errorbar(aes(x=zone_name, ymin=mean_land - sd_land*2,
ymax = mean_land + sd_land*2, group=period),
position = position_dodge(width = 0.9),
colour='gray') +
scale_fill_manual(values=c('gray25', 'firebrick')) +
ylab(expression(Land~Area~(km^2~x~10^6))) +
xlab("Holdridge Life Zone") +
scale_y_continuous(labels=scales::comma) +
theme_bw() +
theme(axis.text.x = element_text(hjust=1, angle=45))
sums = group_by(land_area, collapsed_zone) %>%
summarize(total_land = sum(zone_area)) %>%
ungroup() %>%
filter(total_land > 0.0)
totals = filter(land_area, collapsed_zone %in% sums$collapsed_zone) %>%
mutate(land_area_km3 = zone_area/1E6) %>%
group_by(period, collapsed_zone) %>%
summarize(mean_land = mean(land_area_km3, na.rm=T),
sd_land = sd(land_area_km3, na.rm = T),
num = n()) %>%
ungroup() %>%
mutate(se_land = sd_land/sqrt(num))
ggplot(totals, aes(collapsed_zone, mean_land)) +
geom_col(aes(fill=period), position='dodge') +
geom_errorbar(aes(x=zone_name, ymin=mean_land - sd_land*2,
ymax = mean_land + sd_land*2, group=period),
position = position_dodge(width = 0.9),
colour='gray') +
scale_fill_manual(values=c('gray25', 'firebrick')) +
ylab(expression(Land~Area~(km^2~x~10^6))) +
xlab("Holdridge Life Zone") +
scale_y_continuous(labels=scales::comma) +
theme_bw() +
theme(axis.text.x = element_text(hjust=1, angle=45))
ggplot(totals, aes(collapsed_zone, mean_land)) +
geom_col(aes(fill=period), position='dodge') +
geom_errorbar(aes(x=collapsed_zone, ymin=mean_land - sd_land*2,
ymax = mean_land + sd_land*2, group=period),
position = position_dodge(width = 0.9),
colour='gray') +
scale_fill_manual(values=c('gray25', 'firebrick')) +
ylab(expression(Land~Area~(km^2~x~10^6))) +
xlab("Holdridge Life Zone") +
scale_y_continuous(labels=scales::comma) +
theme_bw() +
theme(axis.text.x = element_text(hjust=1, angle=45))
ggplot(totals, aes(collapsed_zone, mean_land)) +
geom_col(aes(fill=period), position='dodge')
ggplot(totals, aes(collapsed_zone, mean_land)) +
geom_col(aes(fill=period), position='dodge') +
geom_errorbar(aes(x=collapsed_zone, ymin=mean_land - se_land*2,
ymax = mean_land + se_land*2, group=period),
position = position_dodge(width = 0.9),
colour='gray') +
scale_fill_manual(values=c('gray25', 'firebrick')) +
ylab(expression(Land~Area~(km^2~x~10^6))) +
xlab("Holdridge Life Zone") +
scale_y_continuous(labels=scales::comma) +
theme_bw() +
theme(axis.text.x = element_text(hjust=1, angle=45))
land_area = read.csv('/Users/afoster/Downloads/land_area_difference.csv') %>%
dplyr::select(-X) %>%
merge(cols_df, by.x = 'zone_name', by.y = 'holdridge_zone', all.x = T) %>%
mutate(zone_name = factor(zone_name, levels = zones)) %>%
mutate(collapsed_zone = factor(collapsed_zone, levels = czones)) %>%
mutate(period = as.factor(period)) %>%
mutate(period = factor(period, levels = c('historical', 'future')))
sums = group_by(land_area, collapsed_zone) %>%
summarize(total_land = sum(zone_area)) %>%
ungroup() %>%
filter(total_land > 0.0)
totals = filter(land_area, collapsed_zone %in% sums$collapsed_zone) %>%
mutate(land_area_km3 = zone_area/1E6) %>%
group_by(period, collapsed_zone) %>%
summarize(mean_land = mean(land_area_km3, na.rm=T),
sd_land = sd(land_area_km3, na.rm = T),
num = n()) %>%
ungroup() %>%
mutate(se_land = sd_land/sqrt(num))
ggplot(totals, aes(collapsed_zone, mean_land)) +
geom_col(aes(fill=period), position='dodge') +
geom_errorbar(aes(x=collapsed_zone, ymin=mean_land - se_land*2,
ymax = mean_land + se_land*2, group=period),
position = position_dodge(width = 0.9),
colour='gray') +
scale_fill_manual(values=c('gray25', 'firebrick')) +
ylab(expression(Land~Area~(km^2~x~10^6))) +
xlab("Holdridge Life Zone") +
scale_y_continuous(labels=scales::comma) +
theme_bw() +
theme(axis.text.x = element_text(hjust=1, angle=45))
ggplot(totals, aes(collapsed_zone, mean_land)) +
geom_col(aes(fill=period), position='dodge') +
geom_errorbar(aes(x=collapsed_zone, ymin=mean_land - se_land*2,
ymax = mean_land + se_land*2, group=period),
position = position_dodge(width = 0.9),
colour='gray', width=0.2) +
scale_fill_manual(values=c('gray25', 'firebrick')) +
ylab(expression(Land~Area~(km^2~x~10^6))) +
xlab("Holdridge Life Zone") +
scale_y_continuous(labels=scales::comma) +
theme_bw() +
theme(axis.text.x = element_text(hjust=1, angle=45))
ggplot(totals, aes(collapsed_zone, mean_land)) +
geom_col(aes(fill=period), position='dodge') +
geom_errorbar(aes(x=collapsed_zone, ymin=mean_land - se_land*2,
ymax = mean_land + se_land*2, group=period),
position = position_dodge(width = 0.9),
colour='gray', width=0.6) +
scale_fill_manual(values=c('gray25', 'firebrick')) +
ylab(expression(Land~Area~(km^2~x~10^6))) +
xlab("Holdridge Life Zone") +
scale_y_continuous(labels=scales::comma) +
theme_bw() +
theme(axis.text.x = element_text(hjust=1, angle=45))
collapsed_cols = c('#d9d9d9', # polar desert
'#a6cee3', # tundra
'#a2ad9c', # boreal desert
'#000080', # boreal forest
'#fdbf6f', # steppe
'#2E8B80', # cool temperate
'#ff7f00', # temperate desert
'#33a02c', # temperate forest
'#FFD700',
'#b2df8a',
'#b15928',
'#9ACD32',
'#006400')
cols_df = read.csv('/Users/afoster/Downloads/holdridge_zones.csv') %>%
filter(type == 'latitude') %>%
dplyr::select(index, holdridge_zone, collapsed_zone, collapsed_zone_index)
zones = unique(cols_df$holdridge_zone)
czones = unique(cols_df$collapsed_zone)
future_collapsed_file = '/Users/afoster/Downloads/transition_future_collapsed.csv'
hist_collapsed_file = '/Users/afoster/Downloads/transition_hist_collapsed.csv'
future_file = '/Users/afoster/Downloads/transition_future.csv'
hist_file = '/Users/afoster/Downloads/transition_hist.csv'
dat_long_hist_c = get_dat_long(hist_collapsed_file, czones, 'historical')
dat_long_future_c = get_dat_long(future_collapsed_file, czones, 'future')
zonal_sankey(dat_long_hist_c, 1850, 1950, collapsed_cols)
zonal_sankey(dat_long_future_c, 2000, 2100, collapsed_cols)
dat_long_hist = get_dat_long(hist_file, zones, 'historical')
dat_long_future = get_dat_long(future_file, zones, 'future')
zonal_sankey(dat_long_hist, 1850, 1950)
zonal_sankey(dat_long_future, 2000, 2100)
zonal_sankey(dat_long_hist_c, 1850, 1950, collapsed_cols)
zonal_sankey(dat_long_future_c, 2000, 2100, collapsed_cols)
library(dplyr)
library(ggplot2)
library(ggsankey)
library(patchwork)
get_dat_long = function(file, zones, period){
dat = read.csv(file) %>%
dplyr::select(source_label, target_label, mean_area) %>%
dplyr::rename('value' = 'mean_area') %>%
mutate(type=period)
colnames(dat) = c('source', 'target', 'value', 'type')
dat_long <- make_long(dat, source, target, value='value') %>%
mutate(node = factor(node, levels = zones))
return(dat_long)
}
zonal_sankey = function(dat_long, y1, y2, colors=NULL){
p = ggplot(dat_long, aes(x = x,
next_x = next_x,
node = node,
next_node = next_node,
fill = factor(node),
label=node,
value=value)) +
geom_sankey() +
theme_sankey() +
geom_sankey_label(size = 3.5, color = 1, fill = "white") +
xlab(NULL) +
scale_x_discrete(labels = c(y1, y2)) +
ylab(NULL)
if (!is.null(colors)){
p = p +
scale_fill_manual(values=colors, name='Life Zone')
} else{
p = p + scale_fill_discrete(name='Life Zone')
}
return(p)
}
get_pval = function(land_area, zone) {
dat_hist = filter(land_area, zone_name == zone & period == 'historical')
dat_future = filter(land_area, zone_name == zone & period == 'future')
if (nrow(dat_hist) < 10){
return(list(tstat = NA, pval = NA))
} else if (nrow(dat_future) < 10){
return(list(tstat = NA, pval = NA))
} else {
ttest = t.test(dat_hist$zone_area, dat_future$zone_area,
paired = TRUE, alternative = "two.sided")
return(list(tstat = ttest$statistic, pval = ttest$p.value))
}
}
collapsed_cols = c('#d9d9d9', # polar desert
'#a6cee3', # tundra
'#a2ad9c', # boreal desert
'#000080', # boreal forest
'#fdbf6f', # steppe
'#2E8B80', # cool temperate
'#ff7f00', # temperate desert
'#33a02c', # temperate forest
'#FFD700',
'#b2df8a',
'#b15928',
'#9ACD32',
'#006400')
cols_df = read.csv('/Users/afoster/Downloads/holdridge_zones.csv') %>%
filter(type == 'latitude') %>%
dplyr::select(index, holdridge_zone, collapsed_zone, collapsed_zone_index)
zones = unique(cols_df$holdridge_zone)
czones = unique(cols_df$collapsed_zone)
cols_df = read.csv('/Users/afoster/Downloads/holdridge_zones.csv') %>%
filter(type == 'latitude')
czones = unique(cols_df$collapsed_zone)
cols_df = read.csv('/Users/afoster/Downloads/holdridge_zones.csv') %>%
filter(type == 'latitude') %>%
dplyr::select(index, holdridge_zone, color, collapsed_zone, collapsed_zone_index)
zones = unique(cols_df$holdridge_zone)
czones = unique(cols_df$collapsed_zone)
full_cols = cols_df$color
future_collapsed_file = '/Users/afoster/Downloads/transition_future_collapsed.csv'
hist_collapsed_file = '/Users/afoster/Downloads/transition_hist_collapsed.csv'
future_file = '/Users/afoster/Downloads/transition_future.csv'
hist_file = '/Users/afoster/Downloads/transition_hist.csv'
dat_long_hist_c = get_dat_long(hist_collapsed_file, czones, 'historical')
dat_long_future_c = get_dat_long(future_collapsed_file, czones, 'future')
zonal_sankey(dat_long_hist_c, 1850, 1950, collapsed_cols)
zonal_sankey(dat_long_future_c, 2000, 2100, collapsed_cols)
dat_long_hist = get_dat_long(hist_file, zones, 'historical')
dat_long_future = get_dat_long(future_file, zones, 'future')
zonal_sankey(dat_long_hist, 1850, 1950)
zonal_sankey(dat_long_hist, 1850, 1950, cols)
zonal_sankey(dat_long_hist, 1850, 1950, full_cols)
zonal_sankey(dat_long_future, 2000, 2100, full_cols)
dat_long_hist = get_dat_long(hist_file, zones, 'historical')
dat_long_future = get_dat_long(future_file, zones, 'future')
p3 = zonal_sankey(dat_long_hist, 1850, 1950, full_cols)
p4 = zonal_sankey(dat_long_future, 2000, 2100, full_cols)
png('sankey_diagram_hist_and_future.png',
height=15, width=14, units='in', res=300)
p4
dev.off()
getwd()
png('sankey_diagram_hist_and_future.png',
height=15, width=5, units='in', res=300)
p4
dev.off()
png('sankey_diagram_hist_and_future.png',
height=15, width=10, units='in', res=300)
p4
dev.off()
get_dat_long = function(file, zones, period){
dat = read.csv(file) %>%
dplyr::select(source_label, target_label, mean_area) %>%
dplyr::rename('value' = 'mean_area') %>%
mutate(type=period)
colnames(dat) = c('source', 'target', 'value', 'type')
dat_long <- make_long(dat, source, target, value='value') %>%
mutate(node = factor(node, levels = zones))
return(dat_long)
}
zonal_sankey = function(dat_long, y1, y2, colors=NULL){
p = ggplot(dat_long, aes(x = x,
next_x = next_x,
node = node,
next_node = next_node,
fill = factor(node),
label=node,
value=value)) +
geom_sankey() +
theme_sankey() +
geom_sankey_label(size = 3.5, color = 1, fill = "white") +
xlab(NULL) +
scale_x_discrete(labels = c(y1, y2)) +
ylab(NULL)
if (!is.null(colors)){
p = p +
scale_fill_manual(values=colors, name='Life Zone', guide='none')
} else{
p = p + scale_fill_discrete(name='Life Zone')
}
return(p)
}
get_pval = function(land_area, zone) {
dat_hist = filter(land_area, zone_name == zone & period == 'historical')
dat_future = filter(land_area, zone_name == zone & period == 'future')
if (nrow(dat_hist) < 10){
return(list(tstat = NA, pval = NA))
} else if (nrow(dat_future) < 10){
return(list(tstat = NA, pval = NA))
} else {
ttest = t.test(dat_hist$zone_area, dat_future$zone_area,
paired = TRUE, alternative = "two.sided")
return(list(tstat = ttest$statistic, pval = ttest$p.value))
}
}
collapsed_cols = c('#d9d9d9', # polar desert
'#a6cee3', # tundra
'#a2ad9c', # boreal desert
'#000080', # boreal forest
'#fdbf6f', # steppe
'#2E8B80', # cool temperate
'#ff7f00', # temperate desert
'#33a02c', # temperate forest
'#FFD700',
'#b2df8a',
'#b15928',
'#9ACD32',
'#006400')
p1 = zonal_sankey(dat_long_hist_c, 1850, 1950, collapsed_cols)
p2 = zonal_sankey(dat_long_future_c, 2000, 2100, collapsed_cols)
dat_long_hist = get_dat_long(hist_file, zones, 'historical')
dat_long_future = get_dat_long(future_file, zones, 'future')
p3 = zonal_sankey(dat_long_hist, 1850, 1950, full_cols)
p4 = zonal_sankey(dat_long_future, 2000, 2100, full_cols)
png('sankey_diagram_hist_and_future.png',
height=10, width=14, units='in', res=300)
p1 + p2 + plot_layout(guides='collect')
dev.off()
png('sankey_diagram_hist_and_future.png',
height=15, width=13, units='in', res=300)
p4
dev.off()
png('sankey_diagram_hist_and_future_collapsed.png',
height=10, width=14, units='in', res=300)
p1 + p2 + plot_layout(guides='collect')
dev.off()
dat = read.csv(future_file)
dat = dplyr::filter(dat, source_label == 'boreal rain forest')
View(dat)
dat = read.csv(future_file)
dat = dplyr::filter(dat, source_label == 'cool temperate desert scrub')
View(dat)
rsconnect::deployApp(appName = "PPE-viewer")
ls
getw()
setwd('/Users/afoster/Documents/02_Projects/01_FATES_PPE_Calibration/shiny_app/')
rsconnect::deployApp(appName = "PPE-viewer")
rsconnect::deployApp(appName = "PPE-viewer")
shiny::runApp()
runApp()
runApp()
runApp()
install.packages('bslib')
library(bslib)
shiny::runApp()
runApp()
runApp()
runApp()
x_min = 50
x_max = 100
x_default = 100
delta = x_max - x_min
vdelt = delta/x_default
x_default = 50
delta = x_max - x_min
vdelt = delta/x_default
runApp()
runApp()
runApp()
runApp()
VARIABLES
#
# #########################
# Purpose: Load dependencies
# Author: Adrianna C. Foster, NSF NCAR (afoster@ucar.edu)
# Date: September, 2025
# R version 4.5.0 (2025-04-11) 'How About a Twenty-Six'
# #########################
# #########################
# load required packages
if (!require(shiny)) install.packages("shiny", repos = "http://cran.us.r-project.org")
if (!require(dplyr)) install.packages("dplyr", repos = "http://cran.us.r-project.org")
if (!require(bslib)) install.packages("bslib", repos = "http://cran.us.r-project.org")
if (!require(ggplot2)) install.packages("ggplot2", repos = "http://cran.us.r-project.org")
if (!require(reshape2)) install.packages("reshape2", repos = "http://cran.us.r-project.org")
if (!require(plotly)) install.packages("plotly", repos = "http://cran.us.r-project.org")
if (!require(ggpattern)) install.packages("ggpattern", repos = "http://cran.us.r-project.org")
if (!require(DT)) install.packages("DT", repos = "http://cran.us.r-project.org")
if (!require(patchwork)) install.packages("patchwork", repos = "http://cran.us.r-project.org")
if (!require(shinythemes)) install.packages("shinythemes", repos = "http://cran.us.r-project.org")
if (!require(shinyWidgets)) install.packages("shinyWidgets", repos = "http://cran.us.r-project.org")
if (!require(shinydashboard)) install.packages("shinydashboard", repos = "http://cran.us.r-project.org")
if (!require(ggpp)) install.packages("ggpp", repos = "http://cran.us.r-project.org")
if (!require(tidytext)) install.packages("tidytext", repos = "http://cran.us.r-project.org")
if (!require(ncdf4)) install.packages("ncdf4", repos = "http://cran.us.r-project.org")
if (!require(terra)) install.packages("terra", repos = "http://cran.us.r-project.org")
if (!require(ggspatial)) install.packages("ggspatial", repos = "http://cran.us.r-project.org")
if (!require(sf)) install.packages("sf", repos = "http://cran.us.r-project.org")
if (!require(RColorBrewer)) install.packages("RColorBrewer", repos = "http://cran.us.r-project.org")
# source helper scripts
source("R/constants.R")
source("R/helpers.R")
source("R/preprocess.R")
source("R/plotting.R")
fates_map_dat
parameter = 'fff'
varaible = 'QVEGE'
plot_global_vals(fates_map_dat, fatesclm_map_dat,
clm_map_dat, parameter, variable, fates_key,
clm_key, fates_only_params, clm_only_params,
common_params, land, frac_rast)
varaible = 'QVEGE'
plot_global_vals(fates_map_dat, fatesclm_map_dat,
clm_map_dat, parameter, variable, fates_key,
clm_key, fates_only_params, clm_only_params,
common_params, land, frac_rast)
variable = 'QVEGE'
plot_global_vals(fates_map_dat, fatesclm_map_dat,
clm_map_dat, parameter, variable, fates_key,
clm_key, fates_only_params, clm_only_params,
common_params, land, frac_rast)
# source helper scripts
source("R/constants.R")
len(PALETTE_LOOKUP)
length(PALETTE_LOOKUP)
length(VARIABLES)
names(PALETTE_LOOKUP)
!(names(PALETTE_LOOKUP) %in% VARIABLES)
VARIABLES[!(names(PALETTE_LOOKUP) %in% VARIABLES)]
PALETTE_LOOKUP[!(names(PALETTE_LOOKUP) %in% VARIABLES)]
runApp()
